import numpy as np

# Задание №1
# Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга
# (ks): zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Используя математические операции, посчитать коэффициенты линейной регрессии, приняв за X заработную плату
# (то есть, zp - признак), а за y - значения скорингового балла (то есть, ks - целевая переменная).
# Произвести расчет как с использованием intercept, так и без.

zp_x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks_y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# с интерсептом
b1 = (np.mean(zp_x * ks_y) - np.mean(ks_y) * np.mean(zp_x))/ (np.mean(zp_x ** 2) - (np.mean(zp_x) ** 2))
b0 = np.mean(ks_y) - b1 * np.mean(zp_x)
print(f'коэффициенты линейной регрессии равняются b0 = {b0}, b1 = {b1}')
#коэффициенты линейной регрессии равняются b0 = 444.1773573243596, b1 = 2.620538882402765

# без интерсепта
x = zp_x.reshape((10, 1))
y = ks_y.reshape((10, 1))
b = np.dot(np.linalg.inv(np.dot(x.T, x)), x.T @y)
# print(f'коэффициент равняется {b[0][0]}')
# # коэффициент равняется 5.889820420132688

# Задание №2
# Посчитать коэффициент линейной регрессии при заработной плате (zp), используя градиентный спуск (без intercept).

alpha = 1e-6
B1 = 0.1
n = len(zp_x)


def mse_(B1, y=y, x=x, n=len(zp_x)):
    return np.sum((B1*x - y)**2) / n

for i in range(1000):
    B1 -= alpha * (2/n) * np.sum((B1*x - y) * x)
    if i % 100 == 0:
        print(f'Iteration: {i}, B1 = {B1}, mse = {mse_(B1)}')

# Задание №3
# В каких случаях для вычисления доверительных интервалов и проверки статистических гипотез используется
# таблица значений функции Лапласа, а в каких - таблица критических точек распределения Стьюдента?
# Используем таблицы значений Лапласа, когда известна сигма генеральной совокупности, в противном случае распределение
# Стьюдента

# Задание №4
# не решил